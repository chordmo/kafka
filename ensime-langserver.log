[2019-07-03 14:16:15,563] INFO org.github.dragos.vscode.Main$ - Starting server in /Users/m/code/bigdata/kafka/kafka
[2019-07-03 14:16:15,563] INFO org.github.dragos.vscode.Main$ - Starting server in /Users/m/code/bigdata/kafka/kafka
[2019-07-03 14:16:15,585] INFO org.github.dragos.vscode.Main$ - Classpath: /Users/m/.vscode/extensions/dragos.scala-lsp-0.2.3/coursier
[2019-07-03 14:16:15,585] INFO org.github.dragos.vscode.Main$ - Classpath: /Users/m/.vscode/extensions/dragos.scala-lsp-0.2.3/coursier
[2019-07-03 14:16:16,087] DEBUG langserver.core.MessageReader - Received headers:
Content-Length: 1195
[2019-07-03 14:16:16,087] DEBUG langserver.core.MessageReader - Received headers:
Content-Length: 1195
[2019-07-03 14:16:16,128] DEBUG langserver.core.Connection - Received {"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":92515,"rootPath":"/Users/m/code/bigdata/kafka/kafka","rootUri":"file:///Users/m/code/bigdata/kafka/kafka","capabilities":{"workspace":{"applyEdit":true,"didChangeConfiguration":{"dynamicRegistration":false},"didChangeWatchedFiles":{"dynamicRegistration":false},"symbol":{"dynamicRegistration":true},"executeCommand":{"dynamicRegistration":true}},"textDocument":{"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"completionItem":{"snippetSupport":true}},"hover":{"dynamicRegistration":true},"signatureHelp":{"dynamicRegistration":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"definition":{"dynamicRegistration":true},"codeAction":{"dynamicRegistration":true},"codeLens":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true}}},"trace":"off"}}
[2019-07-03 14:16:16,128] DEBUG langserver.core.Connection - Received {"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":92515,"rootPath":"/Users/m/code/bigdata/kafka/kafka","rootUri":"file:///Users/m/code/bigdata/kafka/kafka","capabilities":{"workspace":{"applyEdit":true,"didChangeConfiguration":{"dynamicRegistration":false},"didChangeWatchedFiles":{"dynamicRegistration":false},"symbol":{"dynamicRegistration":true},"executeCommand":{"dynamicRegistration":true}},"textDocument":{"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"completionItem":{"snippetSupport":true}},"hover":{"dynamicRegistration":true},"signatureHelp":{"dynamicRegistration":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"definition":{"dynamicRegistration":true},"codeAction":{"dynamicRegistration":true},"codeLens":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true}}},"trace":"off"}}
[2019-07-03 14:16:17,638] INFO org.github.dragos.vscode.EnsimeLanguageServer - Initialized with 92515, /Users/m/code/bigdata/kafka/kafka, ClientCapabilities()
[2019-07-03 14:16:17,638] INFO org.github.dragos.vscode.EnsimeLanguageServer - Initialized with 92515, /Users/m/code/bigdata/kafka/kafka, ClientCapabilities()
[2019-07-03 14:16:17,640] DEBUG org.github.dragos.vscode.EnsimeLanguageServer - ensime.config = "/Users/m/code/bigdata/kafka/kafka/.ensime" 
[2019-07-03 14:16:17,640] DEBUG org.github.dragos.vscode.EnsimeLanguageServer - ensime.config = "/Users/m/code/bigdata/kafka/kafka/.ensime" 
[2019-07-03 14:16:18,338] INFO akka.event.slf4j.Slf4jLogger - Slf4jLogger started
[2019-07-03 14:16:18,721] ERROR org.github.dragos.vscode.EnsimeLanguageServer - initializeEnsime Error: /Users/m/code/bigdata/kafka/kafka/.ensime
[2019-07-03 14:16:18,721] ERROR org.github.dragos.vscode.EnsimeLanguageServer - initializeEnsime Error: /Users/m/code/bigdata/kafka/kafka/.ensime
[2019-07-03 14:16:18,840] DEBUG langserver.core.MessageWriter - Content-Length: 146



{"jsonrpc":"2.0","method":"window/showMessage","params":{"tpe":1,"message":"No .ensime file in directory. Run `sbt ensimeConfig` to create one."}}
[2019-07-03 14:16:18,840] DEBUG langserver.core.MessageWriter - Content-Length: 146



{"jsonrpc":"2.0","method":"window/showMessage","params":{"tpe":1,"message":"No .ensime file in directory. Run `sbt ensimeConfig` to create one."}}
[2019-07-03 14:16:18,840] DEBUG langserver.core.MessageWriter - payload: {"jsonrpc":"2.0","method":"window/showMessage","params":{"tpe":1,"message":"No .ensime file in directory. Run `sbt ensimeConfig` to create one."}}
[2019-07-03 14:16:18,840] DEBUG langserver.core.MessageWriter - payload: {"jsonrpc":"2.0","method":"window/showMessage","params":{"tpe":1,"message":"No .ensime file in directory. Run `sbt ensimeConfig` to create one."}}
[2019-07-03 14:16:19,016] DEBUG langserver.core.MessageWriter - Content-Length: 441



{"jsonrpc":"2.0","result":{"capabilities":{"textDocumentSync":1,"hoverProvider":true,"completionProvider":{"resolveProvider":false,"triggerCharacters":["."]},"definitionProvider":true,"referencesProvider":false,"documentHighlightProvider":false,"documentSymbolProvider":true,"workspaceSymbolProvider":false,"codeActionProvider":false,"documentFormattingProvider":false,"documentRangeFormattingProvider":false,"renameProvider":false}},"id":0}
[2019-07-03 14:16:19,016] DEBUG langserver.core.MessageWriter - Content-Length: 441



{"jsonrpc":"2.0","result":{"capabilities":{"textDocumentSync":1,"hoverProvider":true,"completionProvider":{"resolveProvider":false,"triggerCharacters":["."]},"definitionProvider":true,"referencesProvider":false,"documentHighlightProvider":false,"documentSymbolProvider":true,"workspaceSymbolProvider":false,"codeActionProvider":false,"documentFormattingProvider":false,"documentRangeFormattingProvider":false,"renameProvider":false}},"id":0}
[2019-07-03 14:16:19,016] DEBUG langserver.core.MessageWriter - payload: {"jsonrpc":"2.0","result":{"capabilities":{"textDocumentSync":1,"hoverProvider":true,"completionProvider":{"resolveProvider":false,"triggerCharacters":["."]},"definitionProvider":true,"referencesProvider":false,"documentHighlightProvider":false,"documentSymbolProvider":true,"workspaceSymbolProvider":false,"codeActionProvider":false,"documentFormattingProvider":false,"documentRangeFormattingProvider":false,"renameProvider":false}},"id":0}
[2019-07-03 14:16:19,016] DEBUG langserver.core.MessageWriter - payload: {"jsonrpc":"2.0","result":{"capabilities":{"textDocumentSync":1,"hoverProvider":true,"completionProvider":{"resolveProvider":false,"triggerCharacters":["."]},"definitionProvider":true,"referencesProvider":false,"documentHighlightProvider":false,"documentSymbolProvider":true,"workspaceSymbolProvider":false,"codeActionProvider":false,"documentFormattingProvider":false,"documentRangeFormattingProvider":false,"renameProvider":false}},"id":0}
[2019-07-03 14:16:19,414] DEBUG langserver.core.MessageReader - Received headers:
Content-Length: 52
[2019-07-03 14:16:19,414] DEBUG langserver.core.MessageReader - Received headers:
Content-Length: 52
[2019-07-03 14:16:19,415] DEBUG langserver.core.Connection - Received {"jsonrpc":"2.0","method":"initialized","params":{}}
[2019-07-03 14:16:19,415] DEBUG langserver.core.Connection - Received {"jsonrpc":"2.0","method":"initialized","params":{}}
[2019-07-03 14:16:19,430] ERROR org.github.dragos.vscode.EnsimeLanguageServer - Unknown notification Initialized()
[2019-07-03 14:16:19,430] ERROR org.github.dragos.vscode.EnsimeLanguageServer - Unknown notification Initialized()
[2019-07-03 14:16:57,259] DEBUG langserver.core.MessageReader - Received headers:
Content-Length: 4098
[2019-07-03 14:16:57,259] DEBUG langserver.core.MessageReader - Received headers:
Content-Length: 4098
[2019-07-03 14:16:57,276] DEBUG langserver.core.Connection - Received {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/m/code/bigdata/kafka/kafka/core/src/main/scala/kafka/Kafka.scala","languageId":"scala","version":1,"text":"/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kafka\n\nimport java.util.Properties\n\nimport joptsimple.OptionParser\nimport kafka.utils.Implicits._\nimport kafka.server.{KafkaServer, KafkaServerStartable}\nimport kafka.utils.{CommandLineUtils, Exit, Logging}\nimport org.apache.kafka.common.utils.{Java, LoggingSignalHandler, OperatingSystem, Utils}\n\nimport scala.collection.JavaConverters._\n\nobject Kafka extends Logging {\n\n  def getPropsFromArgs(args: Array[String]): Properties = {\n    val optionParser = new OptionParser(false)\n    val overrideOpt = optionParser.accepts(\"override\", \"Optional property that should override values set in server.properties file\")\n      .withRequiredArg()\n      .ofType(classOf[String])\n    // This is just to make the parameter show up in the help output, we are not actually using this due the\n    // fact that this class ignores the first parameter which is interpreted as positional and mandatory\n    // but would not be mandatory if --version is specified\n    // This is a bit of an ugly crutch till we get a chance to rework the entire command line parsing\n    val versionOpt = optionParser.accepts(\"version\", \"Print version information and exit.\")\n\n    if (args.length == 0 || args.contains(\"--help\")) {\n      CommandLineUtils.printUsageAndDie(optionParser, \"USAGE: java [options] %s server.properties [--override property=value]*\".format(classOf[KafkaServer].getSimpleName()))\n    }\n\n    if (args.contains(\"--version\")) {\n      CommandLineUtils.printVersionAndDie()\n    }\n\n    val props = Utils.loadProps(args(0))\n\n    if (args.length > 1) {\n      val options = optionParser.parse(args.slice(1, args.length): _*)\n\n      if (options.nonOptionArguments().size() > 0) {\n        CommandLineUtils.printUsageAndDie(optionParser, \"Found non argument parameters: \" + options.nonOptionArguments().toArray.mkString(\",\"))\n      }\n\n      props ++= CommandLineUtils.parseKeyValueArgs(options.valuesOf(overrideOpt).asScala)\n    }\n    props\n  }\n\n  def main(args: Array[String]): Unit = {\n    try {\n      val serverProps = getPropsFromArgs(args)\n      val kafkaServerStartable = KafkaServerStartable.fromProps(serverProps)\n\n      try {\n        if (!OperatingSystem.IS_WINDOWS && !Java.isIbmJdk)\n          new LoggingSignalHandler().register()\n      } catch {\n        case e: ReflectiveOperationException =>\n          warn(\"Failed to register optional signal handler that logs a message when the process is terminated \" +\n            s\"by a signal. Reason for registration failure is: $e\", e)\n      }\n\n      // attach shutdown handler to catch terminating signals as well as normal termination\n      Runtime.getRuntime().addShutdownHook(new Thread(\"kafka-shutdown-hook\") {\n        override def run(): Unit = kafkaServerStartable.shutdown()\n      })\n\n      kafkaServerStartable.startup()\n      kafkaServerStartable.awaitShutdown()\n    }\n    catch {\n      case e: Throwable =>\n        fatal(\"Exiting Kafka due to fatal exception\", e)\n        Exit.exit(1)\n    }\n    Exit.exit(0)\n  }\n}\n"}}}
[2019-07-03 14:16:57,276] DEBUG langserver.core.Connection - Received {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/m/code/bigdata/kafka/kafka/core/src/main/scala/kafka/Kafka.scala","languageId":"scala","version":1,"text":"/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kafka\n\nimport java.util.Properties\n\nimport joptsimple.OptionParser\nimport kafka.utils.Implicits._\nimport kafka.server.{KafkaServer, KafkaServerStartable}\nimport kafka.utils.{CommandLineUtils, Exit, Logging}\nimport org.apache.kafka.common.utils.{Java, LoggingSignalHandler, OperatingSystem, Utils}\n\nimport scala.collection.JavaConverters._\n\nobject Kafka extends Logging {\n\n  def getPropsFromArgs(args: Array[String]): Properties = {\n    val optionParser = new OptionParser(false)\n    val overrideOpt = optionParser.accepts(\"override\", \"Optional property that should override values set in server.properties file\")\n      .withRequiredArg()\n      .ofType(classOf[String])\n    // This is just to make the parameter show up in the help output, we are not actually using this due the\n    // fact that this class ignores the first parameter which is interpreted as positional and mandatory\n    // but would not be mandatory if --version is specified\n    // This is a bit of an ugly crutch till we get a chance to rework the entire command line parsing\n    val versionOpt = optionParser.accepts(\"version\", \"Print version information and exit.\")\n\n    if (args.length == 0 || args.contains(\"--help\")) {\n      CommandLineUtils.printUsageAndDie(optionParser, \"USAGE: java [options] %s server.properties [--override property=value]*\".format(classOf[KafkaServer].getSimpleName()))\n    }\n\n    if (args.contains(\"--version\")) {\n      CommandLineUtils.printVersionAndDie()\n    }\n\n    val props = Utils.loadProps(args(0))\n\n    if (args.length > 1) {\n      val options = optionParser.parse(args.slice(1, args.length): _*)\n\n      if (options.nonOptionArguments().size() > 0) {\n        CommandLineUtils.printUsageAndDie(optionParser, \"Found non argument parameters: \" + options.nonOptionArguments().toArray.mkString(\",\"))\n      }\n\n      props ++= CommandLineUtils.parseKeyValueArgs(options.valuesOf(overrideOpt).asScala)\n    }\n    props\n  }\n\n  def main(args: Array[String]): Unit = {\n    try {\n      val serverProps = getPropsFromArgs(args)\n      val kafkaServerStartable = KafkaServerStartable.fromProps(serverProps)\n\n      try {\n        if (!OperatingSystem.IS_WINDOWS && !Java.isIbmJdk)\n          new LoggingSignalHandler().register()\n      } catch {\n        case e: ReflectiveOperationException =>\n          warn(\"Failed to register optional signal handler that logs a message when the process is terminated \" +\n            s\"by a signal. Reason for registration failure is: $e\", e)\n      }\n\n      // attach shutdown handler to catch terminating signals as well as normal termination\n      Runtime.getRuntime().addShutdownHook(new Thread(\"kafka-shutdown-hook\") {\n        override def run(): Unit = kafkaServerStartable.shutdown()\n      })\n\n      kafkaServerStartable.startup()\n      kafkaServerStartable.awaitShutdown()\n    }\n    catch {\n      case e: Throwable =>\n        fatal(\"Exiting Kafka due to fatal exception\", e)\n        Exit.exit(1)\n    }\n    Exit.exit(0)\n  }\n}\n"}}}
[2019-07-03 14:16:59,725] DEBUG langserver.core.MessageReader - Received headers:
Content-Length: 165
[2019-07-03 14:16:59,725] DEBUG langserver.core.MessageReader - Received headers:
Content-Length: 165
[2019-07-03 14:16:59,726] DEBUG langserver.core.Connection - Received {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/m/code/bigdata/kafka/kafka/core/src/main/scala/kafka/Kafka.scala"}}}
[2019-07-03 14:16:59,726] DEBUG langserver.core.Connection - Received {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/m/code/bigdata/kafka/kafka/core/src/main/scala/kafka/Kafka.scala"}}}
[2019-07-03 14:16:59,734] DEBUG org.github.dragos.vscode.EnsimeLanguageServer - Removing file:///Users/m/code/bigdata/kafka/kafka/core/src/main/scala/kafka/Kafka.scala from Ensime.
[2019-07-03 14:16:59,734] DEBUG org.github.dragos.vscode.EnsimeLanguageServer - Removing file:///Users/m/code/bigdata/kafka/kafka/core/src/main/scala/kafka/Kafka.scala from Ensime.
[2019-07-03 14:19:43,001] INFO langserver.core.MessageReader - End of stream, terminating thread
[2019-07-03 14:19:43,001] INFO langserver.core.MessageReader - End of stream, terminating thread
[2019-07-03 14:19:43,016] INFO org.github.dragos.vscode.EnsimeLanguageServer - Shutdown request
[2019-07-03 14:19:43,016] INFO org.github.dragos.vscode.EnsimeLanguageServer - Shutdown request
[2019-07-03 14:19:43,021] INFO org.github.dragos.vscode.EnsimeLanguageServer - Shutting down actor system.
[2019-07-03 14:19:43,021] INFO org.github.dragos.vscode.EnsimeLanguageServer - Shutting down actor system.
[2019-07-03 14:19:43,177] INFO org.github.dragos.vscode.EnsimeLanguageServer - Actor system down.
[2019-07-03 14:19:43,177] INFO org.github.dragos.vscode.EnsimeLanguageServer - Actor system down.
